import 'dotenv/config';
import { Hono } from "hono";
import { readFile } from "fs/promises";
import * as path from "path";
import { db } from '../db/index.js';
import { categories, posts, comments, post_picture, post_code, users } from '../db/schema.js'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° users
import { eq } from "drizzle-orm";

// ‚úÖ [‡πÅ‡∏Å‡πâ] import serveStatic ‡∏à‡∏≤‡∏Å path ‡πÉ‡∏´‡∏°‡πà
import { serveStatic } from "@hono/node-server/serve-static";
import { getCookie } from "hono/cookie";

type Variables = {
  user?: {
    id: number;
    // add other user properties if needed
  };
};

const homeRoute = new Hono<{ Variables: Variables }>();

// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå static (‡πÄ‡∏ä‡πà‡∏ô auth-style.css) ‡∏à‡∏≤‡∏Å src/pages
homeRoute.use(
  "/",
  serveStatic({
    root: path.join(process.cwd(), "src/pages"),
  })
);

// ‚úÖ Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ HTML
async function loadPage(filename: string) {
  const filePath = path.join(process.cwd(), "src/pages", filename);
  return await readFile(filePath, "utf-8");
}

// ‚úÖ Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ admin - ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å database
async function isAdmin(userId: number): Promise<boolean> {
  try {
    if (!userId) return false;
    
    console.log('Checking admin status for user ID:', userId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å database (‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô schema)
    const user = await db.select({
      id: users.id,
      username: users.username,
      role: users.role
    }).from(users).where(eq(users.id, userId)).limit(1);
    
    if (user.length === 0) {
      console.log('User not found in database');
      return false;
    }
    
    const userData = user[0];
    console.log('User data from DB:', userData);
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ admin ‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ (role, username, id)
    const adminStatus = (
      userData.role === 'admin' ||
      userData.username === 'admin' ||
      userData.id === 1 // hardcode admin ID
    );
    
    console.log('Admin status result:', adminStatus);
    return adminStatus;
    
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  }
}

// ----------------------------------------------------
// üîπ ‡∏´‡∏ô‡πâ‡∏≤ homepage
// ----------------------------------------------------

// ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] API ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ admin - ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
homeRoute.get("/admin/check", async (c) => {
  try {
    const userCookie = getCookie(c, "user");
    const user = userCookie ? JSON.parse(userCookie) : null;
    
    if (!user || !user.id) {
      return c.json({ isAdmin: false, user: null });
    }
    
    const adminStatus = await isAdmin(user.id);
    
    return c.json({ 
      isAdmin: adminStatus,
      user: { id: user.id, username: user.username }
    });
  } catch (error) {
    console.error('Error checking admin status:', error);
    return c.json({ isAdmin: false, user: null });
  }
});

// ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
homeRoute.get("/categories", async (c) => {
  const result = await db.select().from(categories);
  return c.json(result);
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
homeRoute.post("/categories", async (c) => {
  const body = await c.req.json();
  // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ user id ‡∏à‡∏≤‡∏Å session ‡∏´‡∏£‡∏∑‡∏≠ token
  const userCookie = getCookie(c, "user");
  const user = userCookie ? JSON.parse(userCookie) : null;
  if (!user) return c.json({ error: 'Unauthorized' }, 401);
  
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const existing = await db.select().from(categories).where(eq(categories.name, body.name));
  if (existing.length > 0) {
    return c.json({ error: '‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' }, 400);
  }
  
  const inserted = await db.insert(categories).values({
    name: body.name,
    createdBy: user.id,
  }).returning();
  return c.json(inserted[0]);
});

// ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] API ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
homeRoute.put("/categories/:id", async (c) => {
  try {
    const categoryId = parseInt(c.req.param("id"));
    const { name } = await c.req.json();
    
    const userCookie = getCookie(c, "user");
    const user = userCookie ? JSON.parse(userCookie) : null;
    
    if (!user || !(await isAdmin(user.id))) {
      return c.json({ error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' }, 403);
    }
    
    if (!name || !name.trim()) {
      return c.json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' }, 400);
    }
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    const existing = await db.select().from(categories)
      .where(eq(categories.name, name.trim()));
    
    if (existing.length > 0 && existing[0].id !== categoryId) {
      return c.json({ error: '‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' }, 400);
    }
    
    const updated = await db.update(categories)
      .set({ name: name.trim() })
      .where(eq(categories.id, categoryId))
      .returning();
    
    if (updated.length === 0) {
      return c.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' }, 404);
    }
    
    return c.json({ success: true, category: updated[0] });
  } catch (error) {
    console.error('Error updating category:', error);
    return c.json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' }, 500);
  }
});

// ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] API ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
homeRoute.delete("/categories/:id", async (c) => {
  try {
    const categoryId = parseInt(c.req.param("id"));
    
    const userCookie = getCookie(c, "user");
    const user = userCookie ? JSON.parse(userCookie) : null;
    
    if (!user || !(await isAdmin(user.id))) {
      return c.json({ error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' }, 403);
    }
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const category = await db.select().from(categories).where(eq(categories.id, categoryId));
    if (category.length === 0) {
      return c.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' }, 404);
    }
    
    console.log(`Admin ${user.username} is deleting category: ${category[0].name} (ID: ${categoryId})`);
    
    // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
    const postsInCategory = await db.select({ id: posts.id }).from(posts).where(eq(posts.categoryId, categoryId));
    const postIds = postsInCategory.map(p => p.id);
    
    console.log(`Found ${postIds.length} posts to delete`);
    
    let deletedItems = {
      comments: 0,
      pictures: 0,
      codes: 0,
      posts: 0,
      category: 0
    };
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö)
    if (postIds.length > 0) {
      // 1. ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
      for (const postId of postIds) {
        const deletedComments = await db.delete(comments).where(eq(comments.postId, postId)).returning();
        deletedItems.comments += deletedComments.length;
      }
      
      // 2. ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
      for (const postId of postIds) {
        const deletedPictures = await db.delete(post_picture).where(eq(post_picture.postId, postId)).returning();
        deletedItems.pictures += deletedPictures.length;
      }
      
      // 3. ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
      for (const postId of postIds) {
        const deletedCodes = await db.delete(post_code).where(eq(post_code.postId, postId)).returning();
        deletedItems.codes += deletedCodes.length;
      }
      
      // 4. ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const deletedPosts = await db.delete(posts).where(eq(posts.categoryId, categoryId)).returning();
      deletedItems.posts = deletedPosts.length;
    }
    
    // 5. ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    const deletedCategory = await db.delete(categories).where(eq(categories.id, categoryId)).returning();
    deletedItems.category = deletedCategory.length;
    
    console.log('Deletion summary:', deletedItems);
    
    return c.json({ 
      success: true, 
      message: `‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${category[0].name}" ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      deletedItems
    });
  } catch (error) {
    console.error('Error deleting category:', error);
    return c.json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' }, 500);
  }
});

// ‡∏´‡∏ô‡πâ‡∏≤ homepage (render)
homeRoute.get("/", async (c) => {
  return c.html(await loadPage("homepage.html"));
});

// ‡∏´‡∏ô‡πâ‡∏≤ createpost (render)
homeRoute.get("/createpost", async (c) => {
  return c.html(await loadPage("create_post.html"));
});

// ‡∏´‡∏ô‡πâ‡∏≤ profile (render)
homeRoute.get("/profile", async (c) => {
  return c.html(await loadPage("profile.html"));
});

// ‡∏´‡∏ô‡πâ‡∏≤ post (render) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ /post?id=...
homeRoute.get("/post", async (c) => {
  return c.html(await loadPage("post.html"));
});

// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏´‡∏ô‡πâ‡∏≤ edit_post (render)
homeRoute.get("/edit_post", async (c) => {
  return c.html(await loadPage("edit_post.html"));
});

export { homeRoute };